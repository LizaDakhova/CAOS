Задачи на межпроцессное взаимодействие и ФС

Общая схема: породить несколько процессов, каждому из которых дать свою часть задачи.
То, что в больших системах называется map/reduce

Для выполнения отдельной части задачи можно использовать уже написанный вами код или стандартную утилиту.
Встроенные в утилиты методы распараллеливания использовать нельзя.

Связь между отцом и сыновьями:
a) pipe
* poll/select позволят эффективнее обрабатывать дескрипторы
* pipe и временные файлы — единственный вариант с внешними программами
b) shared memory + сигнал об окончании (wait/sigaction/…)
c) очереди сообщений

Временные файлы создают с помощью mkstemp.

Эффективность параллельности можно оценивать через time. 
Оптимальное число может быть больше числа ядер, т.к. процесс тратит время чтение/запись, т.е. не является чисто счетным.

Пример существующей утилиты:
* make, можно задать число параллельных компиляций через ключ -j. Компиляция задается через shell-подобную строку, т.е. является произвольной программой с параметрами
* GNU sort

Задачи:

1. wc на тысячи имен.

Программе дается два параметра: файл с именами и число параллельно работающих сыновей.
Каждый сын реализует wc (через ваш код или exec), основной процесс суммирует статистику и выводит её на стандартный вывод.

2. grep на тысячи имен

Программе дается три параметра: образец строки, файл с именами и число параллельно работающих сыновей.
Каждый сын реализует grep (через ваш код с простым шаблоном или exec) на один файл. 
Родитель должен отобрать уникальные строки.

3. Сортировка огромного файла

Программе дается два параметра: файл для сортировки и число порождаемых сыновей.
Каждый сын реализует сортироку своего куска, отец сливает всё в выходной поток (слияние)
